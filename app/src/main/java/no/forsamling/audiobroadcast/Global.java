package no.royalone.audiobroadcast;

import android.annotation.SuppressLint;
import android.content.Context;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.util.Log;

import no.royalone.audiobroadcast.controller.ClientDetails;
import no.royalone.audiobroadcast.controller.Playback;
import no.royalone.audiobroadcast.controller.Server;
import no.royalone.audiobroadcast.services.UPnPAudioService;

import org.teleal.cling.model.meta.Icon;
import org.teleal.cling.model.types.UDN;

import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

/**
 * Created by royal on 8/5/2018.
 */

//http://4thline.org/projects/cling/core/manual/cling-core-manual.xhtml
public class Global {

  public static Server _server;
  public static Playback _playback;
  public static final int DEFAULT_PORT = 4000;
  public static int  PERMISSION_REQUEST_READ_PHONE_STATE  = 100;

  public static UPnPAudioService audioService;
  public static Icon getDeviceIcon() {
    return new Icon("image/png", 48, 48, 8, URI.create("icon.png
  }

  public static String getDeviceBrand(){
    StringBuilder sb = new StringBuilder();
    if (!Build.MODEL.toLowerCase().startsWith(Build.MANUFACTURER.toLowerCase())) {
      sb.append(Build.MANUFACTURER);
      sb.append(" ");
    }
    sb.append(Build.MODEL);
    return sb.toString();
  }


  /**
   * Get the method name for a depth in call stack. <br />
   * Utility function
   * @param depth depth in the call stack (0 means current method, 1 means call method, ...)
   * @return method name
   */
  public static String getMethodName(final int depth) {
    final StackTraceElement[] ste = Thread.currentThread().getStackTrace();
    return "***************" + ste[ste.length - 1 - depth].getMethodName() + "*****************";
  }

  public static String getServerIP() {
    try {
      Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces();
      while (en.hasMoreElements()) {
        Enumeration<InetAddress> enumIpAddr = ((NetworkInterface) en.nextElement()).getInetAddresses();
        while (enumIpAddr.hasMoreElements()) {
          InetAddress inetAddress = (InetAddress) enumIpAddr.nextElement();
          if (!inetAddress.isLoopbackAddress() && (inetAddress instanceof Inet4Address)) {
            return inetAddress.getHostAddress();
          }
        }
      }
    } catch (SocketException ex) {
      Log.e("ServerActivity", ex.toString());
    }
    return null;
  }

  @SuppressLint("WifiManagerLeak")
  public boolean isWiFiEnabled() {
    return ((WifiManager) BaseApplication.getContext().getSystemService(Context.WIFI_SERVICE)).isWifiEnabled();
  }

  public static final String DEVICE_TYPE = "AudioBroadCastDevice";
  public static final UDN AUDIO_BROADCAST_UDN = UDN.uniqueSystemIdentifier("AudioBroadCast");
  public static final String SERVICE_TYPE = "AudioBroadCast";

  public static String CONNECTED_TO_ADDRESS = null;
  public static int CONNECTED_TO_PORT = 0;
  public static String CONNECTED_TO_SERVERNAME = "";

  public static int RECORDER_AUDIO_ENCODING = AudioFormat.ENCODING_PCM_16BIT;
  public static int RECORDER_CHANNELS = AudioFormat.CHANNEL_CONFIGURATION_MONO;

//  public static int RECORDER_CHANNELS = AudioFormat.CHANNEL_IN_MONO;
//  public static int RECORDER_SAMPLERATE = 11025;
  public static int RECORDER_SAMPLERATE = 8000;

  public static String SERVER_ADDRESS = null;
  public static int SERVER_PORT = 0;
  public static volatile boolean isListening = false;
  public static volatile boolean isSpeaking = false;
  public static volatile List<ClientDetails> connectedClients = new ArrayList();
  public static volatile List<String> connectedUsers = new ArrayList();
  public static boolean isHeadSet() {
    AudioManager audioManager = (AudioManager) BaseApplication.getContext().getSystemService(Context.AUDIO_SERVICE);
    Log.println(Log.ASSERT, "WiredHeadsetOn = ", "aa" + audioManager.isWiredHeadsetOn());
    Log.i("MusicActive = ", audioManager.isMusicActive() + "");
    Log.i("SpeakerphoneOn = ", audioManager.isSpeakerphoneOn() + "");
    return audioManager.isWiredHeadsetOn();
  }
  public static final String NOTIFICATION_TEXT_WAITING_FOR_LISTENERS = "Waiting for clients...";
}
